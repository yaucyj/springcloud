<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.goldwind.goplus.serviceregistry</groupId>
	<artifactId>goplus-serviceregistry</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>goplus-serviceregistry</name>
	<description>Go+服务注册和发现</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud.version>Dalston.RELEASE</spring-cloud.version>

		<docker.registry.name>testapi.sesgoplus.com:5000</docker.registry.name>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>org.springframework.boot</groupId>-->
			<!--<artifactId>spring-boot-starter-security</artifactId>-->
		<!--</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!--<testFailureIgnore>true</testFailureIgnore>-->
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<mkdir dir="${project.basedir}/src/main/docker"/>
								<copy todir="${project.basedir}/src/main/docker" overwrite="true" >
									<fileset dir="${project.build.directory}" erroronmissingdir="false">
										<include name="*.jar"/>
									</fileset>
								</copy>
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<!--在maven package阶段自动docker build，指定Mvn clean package docker:build –DskipTests-->
				<!--<executions>-->
					<!--<execution>-->
						<!--<id>build-image</id>-->
						<!--<phase>package</phase>-->
						<!--<goals>-->
								<!--<goal>build</goal>-->
						<!--</goals>-->
						<!--<configuration>-->
						<!--</configuration>-->
					<!--</execution>-->

					<!--<execution>-->
						<!--<id>push-image</id>-->
						<!--<phase>install</phase>-->
						<!--<goals>-->
							<!--<goal>push</goal>-->
						<!--</goals>-->
					<!--</execution>-->
				<!--</executions>-->

				<configuration>
					<dockerHost>https://10.200.50.155:2376</dockerHost>
					<dockerCertPath>C:\Users\Administrator\.docker\155</dockerCertPath>

					<!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
					<serverId>docker-regisry</serverId>
					<registryUrl>${docker.registry.name}</registryUrl>

					<imageName>${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					<skipDockerBuild>false</skipDockerBuild>
					<resources>
						<resource><!-- 将打包文件放入dockerDirectory指定的位置 -->
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
